{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PadSelect","className","onChange","this","props","changeNumberOfPads","value","React","Component","NoteSelect","changeRootNote","ChordTypeSelect","changeChordType","Pads","numberOfPads","currentChord","pads","notes","teoria","scale","i","note","activeClass","name","forEach","noteOfCurrentChord","chroma","accidental","push","length","sortedPads","Array","from","pad","index","key","App","state","rootNote","chordType","bind","e","setState","parseInt","target","chord","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yTAIMA,G,uLAEF,OACE,4BACEC,UAAU,eACVC,SAAUC,KAAKC,MAAMC,oBACrB,4BAAQC,MAAM,MAAd,WACA,4BAAQA,MAAM,MAAd,gB,GAPgBC,IAAMC,YAaxBC,E,iLAEF,OACE,4BACER,UAAU,eACVC,SAAUC,KAAKC,MAAMM,gBACrB,4BAAQJ,MAAM,IAAIL,UAAU,UAA5B,KACA,4BAAQK,MAAM,MAAd,WACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,MAAd,WACA,4BAAQA,MAAM,KAAd,U,GAjBiBC,IAAMC,WAuBzBG,E,iLAEF,OACE,4BACEV,UAAU,eACVC,SAAUC,KAAKC,MAAMQ,iBACrB,4BAAQN,MAAM,IAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,KAAd,KACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,QAAd,QACA,4BAAQA,MAAM,YAAd,iB,GA3BsBC,IAAMC,WAiC9BK,E,iLAMF,IAJA,IAAMC,EAAeX,KAAKC,MAAMU,aAC1BC,EAAeZ,KAAKC,MAAMW,aAC1BC,EAAO,GACTC,EAAQC,IAAOC,MAAM,IAAK,aAAaF,QAJpC,WAKEG,GACP,IACIC,EAAOJ,EADHG,EAAI,IAGRE,EAAc,GACdC,EAAO,GAeX,GAdAR,EAAaE,QAAQO,SAAQ,SAAUC,GACjCJ,EAAKK,WAAaD,EAAmBC,WACvCJ,EAAc,SACdC,EAAOE,EAAmBF,OAASE,EAAmBE,iBAG1DX,EAAKY,KAAK,CACRL,KAAMA,EACNG,OAAQL,EAAKK,SACbJ,YAAaA,IAEX,KAAOR,GAAgB,KAAOM,EAAI,GAAK,GACzCJ,EAAKY,KAAK,IAER,KAAOZ,EAAKa,OACd,eArBKT,EAAI,EAAGA,EAAI,GAAIA,IAAK,gBAApBA,GAqBL,MAGJ,IAAIU,EAAa,CACfd,EAAK,IAAKA,EAAK,IAAKA,EAAK,IAAKA,EAAK,IACnCA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAAKA,EAAK,IACjCA,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAChCA,EAAK,GAAIA,EAAK,GAAIA,EAAK,GAAIA,EAAK,IAGlC,OACE,yBAAKf,UAAW,iBAAmBa,GAChCiB,MAAMC,KAAKF,GAAY,SAACG,EAAKC,GAAN,OACtB,yBAAKjC,UAAW,0BAA2BkC,IAAKD,GAC9C,yBAAKjC,UAAU,sDACb,yBAAKA,UAAW,6BAA+BgC,EAAIX,aACjD,0BAAMrB,UAAU,yBACbgC,EAAIV,iB,GA5CJhB,IAAMC,WAkGV4B,E,YA1Cb,WAAYhC,GAAQ,IAAD,8BACjB,4CAAMA,KACDiC,MAAQ,CACXvB,aAAc,GACdwB,SAAU,IACVC,UAAW,IAEb,EAAKlC,mBAAqB,EAAKA,mBAAmBmC,KAAxB,gBAC1B,EAAK9B,eAAiB,EAAKA,eAAe8B,KAApB,gBACtB,EAAK5B,gBAAkB,EAAKA,gBAAgB4B,KAArB,gBATN,E,gFAYAC,GACjBtC,KAAKuC,SAAS,CAAE5B,aAAc6B,SAASF,EAAEG,OAAOtC,W,qCAGnCmC,GACbtC,KAAKuC,SAAS,CAAEJ,SAAUG,EAAEG,OAAOtC,U,sCAGrBmC,GACdtC,KAAKuC,SAAS,CAAEH,UAAWE,EAAEG,OAAOtC,U,+BAIpC,IAAMS,EAAeG,IAAO2B,MAAM1C,KAAKkC,MAAMC,SAAWnC,KAAKkC,MAAME,WAC7DzB,EAAeX,KAAKkC,MAAMvB,aAChC,OACE,yBAAKb,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,cACb,kBAAC,EAAD,CAAWI,mBAAoBF,KAAKE,qBACpC,kBAAC,EAAD,CAAYK,eAAgBP,KAAKO,iBACjC,kBAAC,EAAD,CAAiBE,gBAAiBT,KAAKS,oBAG3C,kBAAC,EAAD,CAAME,aAAcA,EAAcC,aAAcA,S,GArCtCR,IAAMC,WCpHJsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fd27fea3.chunk.js","sourcesContent":["import React from 'react';\nimport teoria from 'teoria';\nimport './App.css';\n\nclass PadSelect extends React.Component {\n  render() {\n    return (\n      <select\n        className=\"form-control\"\n        onChange={this.props.changeNumberOfPads}>\n        <option value=\"16\">16 pads</option>\n        <option value=\"12\">12 pads</option>\n      </select>\n    );\n  }\n}\n\nclass NoteSelect extends React.Component {\n  render() {\n    return (\n      <select\n        className=\"form-control\"\n        onChange={this.props.changeRootNote}>\n        <option value=\"C\" className=\"active\">C</option>\n        <option value=\"C#\">C# (Db)</option>\n        <option value=\"D\">D</option>\n        <option value=\"D#\">D# (Eb)</option>\n        <option value=\"E\">E</option>\n        <option value=\"F\">F</option>\n        <option value=\"F#\">F# (Gb)</option>\n        <option value=\"G\">G</option>\n        <option value=\"G#\">G# (Ab)</option>\n        <option value=\"A\">A</option>\n        <option value=\"A#\">A# (Bb)</option>\n        <option value=\"B\">B</option>\n      </select>\n    );\n  }\n}\n\nclass ChordTypeSelect extends React.Component {\n  render() {\n    return (\n      <select\n        className=\"form-control\"\n        onChange={this.props.changeChordType}>\n        <option value=\"\">maj</option>\n        <option value=\"maj7\">maj7</option>\n        <option value=\"maj7b5\">maj7b5</option>\n        <option value=\"maj7#5\">maj7#5</option>\n        <option value=\"min\">min</option>\n        <option value=\"min7\">min7</option>\n        <option value=\"min7b5\">min7b5</option>\n        <option value=\"min7#5\">min7#5</option>\n        <option value=\"min6\">min6</option>\n        <option value=\"mmaj7\">mmaj7</option>\n        <option value=\"6\">6</option>\n        <option value=\"7\">7</option>\n        <option value=\"7b5\">7b5</option>\n        <option value=\"7#5\">7#5</option>\n        <option value=\"7sus4\">7sus4</option>\n        <option value=\"aug\">aug</option>\n        <option value=\"dim\">dim</option>\n        <option value=\"dim7\">dim7</option>\n        <option value=\"5\">5</option>\n        <option value=\"sus2\">sus2</option>\n        <option value=\"sus4\">sus4</option>\n        <option value=\"sus2sus4\">sus2sus4</option>\n      </select>\n    );\n  }\n}\n\nclass Pads extends React.Component {\n  render() {\n    const numberOfPads = this.props.numberOfPads;\n    const currentChord = this.props.currentChord;\n    const pads = [];\n    let notes = teoria.scale('c', 'chromatic').notes();\n    for (let i = 0; i < 16; i++) {\n      let a = i % 12;\n      let note = notes[a];\n\n      let activeClass = '';\n      let name = '';\n      currentChord.notes().forEach(function (noteOfCurrentChord) {\n        if (note.chroma() === noteOfCurrentChord.chroma()) {\n          activeClass = 'active';\n          name = noteOfCurrentChord.name() + noteOfCurrentChord.accidental();\n        }\n      });\n      pads.push({\n        name: name,\n        chroma: note.chroma(),\n        activeClass: activeClass,\n      });\n      if (12 === numberOfPads && 0 === (i + 1) % 3) {\n        pads.push({});\n      }\n      if (16 === pads.length) {\n        break;\n      }\n    }\n    let sortedPads = [\n      pads[12], pads[13], pads[14], pads[15],\n      pads[8], pads[9], pads[10], pads[11],\n      pads[4], pads[5], pads[6], pads[7],\n      pads[0], pads[1], pads[2], pads[3],\n    ];\n\n    return (\n      <div className={'row pads pads-' + numberOfPads}>\n        {Array.from(sortedPads, (pad, index) =>\n          <div className={'col col-3 pad-container'} key={index}>\n            <div className=\"embed-responsive embed-responsive-1by1 text-center\">\n              <div className={'embed-responsive-item pad ' + pad.activeClass}>\n                <span className=\"pad-name align-middle\">\n                  {pad.name}\n                </span>\n              </div>\n            </div>\n          </div>,\n        )}\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfPads: 16,\n      rootNote: 'C',\n      chordType: '',\n    };\n    this.changeNumberOfPads = this.changeNumberOfPads.bind(this);\n    this.changeRootNote = this.changeRootNote.bind(this);\n    this.changeChordType = this.changeChordType.bind(this);\n  }\n\n  changeNumberOfPads(e) {\n    this.setState({ numberOfPads: parseInt(e.target.value) });\n  }\n\n  changeRootNote(e) {\n    this.setState({ rootNote: e.target.value });\n  }\n\n  changeChordType(e) {\n    this.setState({ chordType: e.target.value });\n  }\n\n  render() {\n    const currentChord = teoria.chord(this.state.rootNote + this.state.chordType);\n    const numberOfPads = this.state.numberOfPads;\n    return (\n      <div className=\"App\">\n        <div className=\"row\">\n          <div className=\"col col-12\">\n            <PadSelect changeNumberOfPads={this.changeNumberOfPads} />\n            <NoteSelect changeRootNote={this.changeRootNote} />\n            <ChordTypeSelect changeChordType={this.changeChordType} />\n          </div>\n        </div>\n        <Pads numberOfPads={numberOfPads} currentChord={currentChord}></Pads>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}