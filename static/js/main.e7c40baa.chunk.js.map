{"version":3,"sources":["ChordFinder/PadSelect.js","ChordFinder/NoteSelect.js","ChordFinder/ChordTypeSelect.js","ChordFinder/Pads.js","ChordFinder/CollectionActions.js","ChordFinder/Collection.js","App.js","serviceWorker.js","index.js"],"names":["PadSelect","aria-label","value","this","props","className","onChange","changeNumberOfPads","React","Component","NoteSelect","changeRootNote","ChordTypeSelect","changeChordType","Pads","numberOfPads","currentChord","pads","notes","teoria","scale","i","note","activeClass","name","forEach","noteOfCurrentChord","chroma","accidental","push","length","sortedPads","Array","from","pad","index","key","CollectionActions","onClick","addChordToCollection","to","collection","join","disabled","clearChordCollection","generateRandomChordCollection","Collection","window","scrollTo","chords","urlParts","location","href","split","chordsNames","pop","parseInt","chordName","chord","e","data-clipboard-text","component","App","state","rootNote","chordType","bind","setState","target","scales","Scale","KNOWN_SCALES","scaleName","Math","floor","random","chordProgression","teoriaChordProgression","getChords","basename","path","exact","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e7c40baa.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class PadSelect extends React.Component {\n  render() {\n    return (\n      <select\n        aria-label=\"Select 12 or 16 pads\"\n        value={this.props.value}\n        className=\"form-control\"\n        onChange={this.props.changeNumberOfPads}>\n        <option value=\"16\">16 pads</option>\n        <option value=\"12\">12 pads</option>\n      </select>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class NoteSelect extends React.Component {\n  render() {\n    return (\n      <select\n        aria-label=\"Select a root note\"\n        value={this.props.value}\n        className=\"form-control\"\n        onChange={this.props.changeRootNote}>\n        <option value=\"C\" className=\"active\">C</option>\n        <option value=\"C#\">C# (Db)</option>\n        <option value=\"D\">D</option>\n        <option value=\"D#\">D# (Eb)</option>\n        <option value=\"E\">E</option>\n        <option value=\"F\">F</option>\n        <option value=\"F#\">F# (Gb)</option>\n        <option value=\"G\">G</option>\n        <option value=\"G#\">G# (Ab)</option>\n        <option value=\"A\">A</option>\n        <option value=\"A#\">A# (Bb)</option>\n        <option value=\"B\">B</option>\n      </select>\n    );\n  }\n}\n","import React from 'react';\n\nexport default class ChordTypeSelect extends React.Component {\n  render() {\n    return (\n      <select\n        aria-label=\"Select a chord type\"\n        value={this.props.value}\n        className=\"form-control\"\n        onChange={this.props.changeChordType}>\n        <option value=\"\">maj</option>\n        <option value=\"maj7\">maj7</option>\n        <option value=\"maj7b5\">maj7b5</option>\n        <option value=\"maj7#5\">maj7#5</option>\n        <option value=\"min\">min</option>\n        <option value=\"min7\">min7</option>\n        <option value=\"min7b5\">min7b5</option>\n        <option value=\"min7#5\">min7#5</option>\n        <option value=\"min6\">min6</option>\n        <option value=\"mmaj7\">mmaj7</option>\n        <option value=\"6\">6</option>\n        <option value=\"7\">7</option>\n        <option value=\"7b5\">7b5</option>\n        <option value=\"7#5\">7#5</option>\n        <option value=\"7sus4\">7sus4</option>\n        <option value=\"aug\">aug</option>\n        <option value=\"dim\">dim</option>\n        <option value=\"dim7\">dim7</option>\n        <option value=\"5\">5</option>\n        <option value=\"sus2\">sus2</option>\n        <option value=\"sus4\">sus4</option>\n        <option value=\"sus2sus4\">sus2sus4</option>\n      </select>\n    );\n  }\n}\n","import React from 'react';\nimport teoria from 'teoria';\n\nexport default class Pads extends React.Component {\n  render() {\n    const numberOfPads = this.props.numberOfPads;\n    const currentChord = this.props.currentChord;\n    const pads = [];\n    let notes = teoria.scale('c', 'chromatic').notes();\n    for (let i = 0; i < 16; i++) {\n      let a = i % 12;\n      let note = notes[a];\n\n      let activeClass = '';\n      let name = '';\n      currentChord.notes().forEach(function (noteOfCurrentChord) {\n        if (note.chroma() === noteOfCurrentChord.chroma()) {\n          activeClass = 'active';\n          name = noteOfCurrentChord.name() + noteOfCurrentChord.accidental();\n        }\n      });\n      pads.push({\n        name: name,\n        chroma: note.chroma(),\n        activeClass: activeClass,\n      });\n      if (12 === numberOfPads && 0 === (i + 1) % 3) {\n        pads.push({});\n      }\n      if (16 === pads.length) {\n        break;\n      }\n    }\n    let sortedPads = [\n      pads[12], pads[13], pads[14], pads[15],\n      pads[8], pads[9], pads[10], pads[11],\n      pads[4], pads[5], pads[6], pads[7],\n      pads[0], pads[1], pads[2], pads[3],\n    ];\n\n    return (\n      <div className={'row pads pads-' + numberOfPads}>\n        {Array.from(sortedPads, (pad, index) =>\n          <div className={'col col-3 pad-container'} key={index}>\n            <div className=\"embed-responsive embed-responsive-1by1 text-center\">\n              <div className={'embed-responsive-item pad ' + pad.activeClass}>\n                <span className=\"pad-name align-middle\">\n                  {pad.name}\n                </span>\n              </div>\n            </div>\n          </div>,\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class CollectionActions extends React.Component {\n  render() {\n    return (\n      <div className=\"row\">\n        <div className=\"col col-12\">\n          <button\n            className=\"btn btn-block text-left\"\n            onClick={this.props.addChordToCollection}>\n            Add chord to collection\n          </button>\n          <Link to={'/collection/' + this.props.numberOfPads + '/' + this.props.collection.join('-')}>\n            <button\n              className='btn btn-block text-left'\n              disabled={0 === this.props.collection.length}>\n              Show chord-collection ({this.props.collection.length})\n            </button>\n          </Link>\n          <button\n            className=\"btn btn-block text-left\"\n            disabled={0 === this.props.collection.length}\n            onClick={this.props.clearChordCollection}>\n            Clear chord-collection\n          </button>\n          <button\n            className=\"btn btn-block text-left\"\n            onClick={this.props.generateRandomChordCollection}>\n            Generate random collection\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Redirect, Link } from 'react-router-dom';\nimport teoria from 'teoria';\nimport Clipboard from 'react-clipboard.js';\n\nimport Pads from './Pads';\n\nexport default class Collection extends React.Component {\n  componentDidMount() {\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    let chords = [];\n    try {\n      let urlParts = window.location.href.split('/');\n      let chordsNames = urlParts.pop().split('-');\n      var numberOfPads = parseInt(urlParts.pop());\n      chordsNames.forEach(function (chordName) {\n        let chord = teoria.chord(chordName);\n        chords.push(chord);\n      });\n    } catch (e) {\n      return <Redirect to={'/'} />;\n    }\n    return (\n      <div className=\"collection\">\n        <div className=\"row\">\n          <div className=\"col col-12\">\n            <h2>MPC-Chords ({chords.length})</h2>\n          </div>\n        </div>\n        <div className=\"row actions\">\n          <div className=\"col col-12\">\n            <Link to={'/'}>\n              <button className=\"btn btn-block text-left back\">\n                Back to the Chord-Finder-App\n              </button>\n            </Link>\n            <Clipboard\n              data-clipboard-text={window.location.href}\n              className=\"btn btn-block text-left mb-0\"\n              component=\"button\">\n              Copy collection-URL to clipboard\n            </Clipboard>\n          </div>\n        </div>\n        {Array.from(chords, (chord, index) =>\n          <div key={index}>\n            <div className=\"row\">\n              <div className=\"col col-12\">\n                <h3>{chord.name}</h3>\n              </div>\n            </div>\n            <Pads\n              key={index}\n              currentChord={chord}\n              numberOfPads={numberOfPads}\n            ></Pads>\n          </div>,\n        )}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Route, Switch, HashRouter } from 'react-router-dom';\n\nimport teoria, { Scale } from 'teoria';\nimport teoriaChordProgression from 'teoria-chord-progression';\n\nimport PadSelect from './ChordFinder/PadSelect';\nimport NoteSelect from './ChordFinder/NoteSelect';\nimport ChordTypeSelect from './ChordFinder/ChordTypeSelect';\nimport Pads from './ChordFinder/Pads';\nimport CollectionActions from './ChordFinder/CollectionActions';\nimport Collection from './ChordFinder/Collection';\n\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numberOfPads: 16,\n      rootNote: 'C',\n      chordType: '',\n      collection: [],\n    };\n    this.changeNumberOfPads = this.changeNumberOfPads.bind(this);\n    this.changeRootNote = this.changeRootNote.bind(this);\n    this.changeChordType = this.changeChordType.bind(this);\n    this.addChordToCollection = this.addChordToCollection.bind(this);\n    this.clearChordCollection = this.clearChordCollection.bind(this);\n    this.generateRandomChordCollection = this.generateRandomChordCollection.bind(this);\n  }\n\n  changeNumberOfPads(e) {\n    this.setState({ numberOfPads: parseInt(e.target.value) });\n  }\n\n  changeRootNote(e) {\n    this.setState({ rootNote: e.target.value });\n  }\n\n  changeChordType(e) {\n    this.setState({ chordType: e.target.value });\n  }\n\n  addChordToCollection() {\n    this.state.collection.push(this.state.rootNote + this.state.chordType);\n    this.setState({ collection: this.state.collection });\n  }\n\n  clearChordCollection() {\n    this.setState({ collection: [] });\n  }\n\n  generateRandomChordCollection() {\n    try {\n      const scales = Scale.KNOWN_SCALES;\n      const scaleName = scales[Math.floor(Math.random() * scales.length)];\n      const notes = teoria.scale('c', 'chromatic').notes();\n      const note = notes[Math.floor(Math.random() * notes.length)];\n      const scale = teoria.scale(note.name(), scaleName);\n      const chordProgression = teoriaChordProgression(scale, [2, 5, 1], 4);\n      let collection = [];\n      chordProgression.getChords().forEach((chord) => {\n        collection.push(chord.name);\n      });\n      this.setState({ collection });\n    } catch (e) {\n      //just keep on trying\n      this.generateRandomChordCollection();\n    }\n  }\n\n  render() {\n    const currentChord = teoria.chord(this.state.rootNote + this.state.chordType);\n    const numberOfPads = this.state.numberOfPads;\n    const collection = this.state.collection;\n    return (\n      <HashRouter basename='/'>\n        <Switch>\n          <Route path={'/collection/:pads/:chords'} exact component={Collection} />\n          <Route path={'/'}>\n            <div className=\"App\">\n              <div className=\"row\">\n                <div className=\"col col-12\">\n                  <h2>MPC-Chord-Finder</h2>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col col-12\">\n                  <PadSelect changeNumberOfPads={this.changeNumberOfPads} value={this.state.numberOfPads} />\n                  <NoteSelect changeRootNote={this.changeRootNote} value={this.state.rootNote} />\n                  <ChordTypeSelect changeChordType={this.changeChordType} value={this.state.chordType} />\n                </div>\n              </div>\n              <Pads\n                numberOfPads={numberOfPads}\n                currentChord={currentChord}>\n              </Pads>\n              <p></p>\n              <CollectionActions\n                addChordToCollection={this.addChordToCollection}\n                clearChordCollection={this.clearChordCollection}\n                generateRandomChordCollection={this.generateRandomChordCollection}\n                numberOfPads={numberOfPads}\n                collection={collection}>\n              </CollectionActions>\n            </div>\n          </Route>\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}